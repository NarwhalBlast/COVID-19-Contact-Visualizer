import networkx as nx
from dataclasses import Graph
from typing import Tuple
import matplotlib.pyplot as plt
from plotly.graph_objs import Scatter, Figure
import data_processing

INFECTED_COLOUR = (255, 0, 0)


# Degrees visualization
def render_degrees_apart(graph: Graph, init_infected: set[str]) -> None:
    """ Render the degrees visualization given a graph, and the initial set of infected people.

    Preconditions:
        - all(not person.infected for person in graph._people.values())
    """
    # Degree calculation
    graph.set_infected(init_infected)
    graph.recalculate_degrees()

    G = nx.Graph()
    G.add_edge(1, 2)
    # Display
    networkx_graph = graph.to_nx()
    nx.draw(networkx_graph, with_labels=True)
    plt.show()


def degrees_apart_get_colour(degrees_apart: int) -> Tuple[int, int, int]:
    """ Given a degrees_apart, return the appropriate colour of the person. The colour calculation
    is a reciprocal function
    """
    percent_fill = 1 / (degrees_apart + 1)
    return (int(INFECTED_COLOUR[0] * percent_fill),
            int(INFECTED_COLOUR[1] * percent_fill),
            int(INFECTED_COLOUR[2] * percent_fill))


def rgb_to_str(rgb: Tuple[int, int, int]) -> str:
    """ Converts a colour from a tuple of ints to to a string in the form "rgb(255, 255, 255)".
    """
    return 'rgb({}, {}, {})'.format(rgb[0], rgb[1], rgb[2])


def visualize_simple_dataset() -> None:
    """Visualize the graph generated by the persons and connections dataset in plotly"""
    # load the graph
    graph_nx = data_processing.load_graph_csv('data/persons.csv', 'data/connections.csv')
    graph_nx = graph_nx.to_nx()

    # i think this generates the positions randomly for each node according to the given layout
    # the layout is algorithm used by networkx
    pos = getattr(nx, 'spring_layout')(graph_nx)

    # put positions of nodes into lists
    x_values = [pos[k][0] for k in graph_nx.nodes]
    y_values = [pos[k][1] for k in graph_nx.nodes]
    labels = list(graph_nx.nodes)

    # set colours of nodes
    colours = ['rgb(255, 0, 0)' for _ in range(len(graph_nx.nodes))]

    # put positions of edges into lists
    x_edges = []
    y_edges = []
    for edge in graph_nx.edges:
        x_edges += [pos[edge[0]][0], pos[edge[1]][0], None]
        y_edges += [pos[edge[0]][1], pos[edge[1]][1], None]

    # create the edges in plotly
    trace3 = Scatter(x=x_edges,
                     y=y_edges,
                     mode='lines',
                     name='edges',
                     line=dict(width=1),
                     hoverinfo='none',
                     )

    # create the nodes in plotly
    trace4 = Scatter(x=x_values,
                     y=y_values,
                     mode='markers',
                     name='nodes',
                     marker=dict(symbol='circle-dot',
                                 size=5,
                                 color=colours,
                                 line=dict(width=0.5)
                                 ),
                     text=labels,
                     hovertemplate='%{text}',
                     hoverlabel={'namelength': 0}
                     )

    # add these nodes and edges to the figure and show the graph
    data1 = [trace3, trace4]
    fig = Figure(data=data1)
    fig.update_layout({'showlegend': False})
    fig.update_xaxes(showgrid=False, zeroline=False, visible=False)
    fig.update_yaxes(showgrid=False, zeroline=False, visible=False)

    fig.show()
