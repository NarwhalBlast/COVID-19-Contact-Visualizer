"""CSC111 Project: COVID-19 Contact Visualizer

Module Description
==================
Visualization Module
This module contains the functions used to create the COVID-19 contact visualization.

Copyright and Usage Information
===============================
This file is Copyright (c) 2021 Simon Chen, Patricia Ding, Salman Husainie, Makayla Duffus
"""
import networkx as nx
from dataclasses import Graph
# import matplotlib.pyplot as plt
from plotly.graph_objs import Scatter, Figure
import data_processing


# Degrees visualization
def render_degrees_apart() -> None:
    """ Render the degrees visualization given a graph, and the initial set of infected people by
    ID.

    Preconditions:
        - all(not person.infected for person in graph._people.values())
    """

    # TESTING COMMENT THIS BLOCK OUT LATER | arguments: (graph: Graph, init_infected: set[str])
    graph = data_processing.load_graph_csv('data/persons.csv', 'data/connections.csv')
    init_infected = {'XR7N23', 'ET441R'}

    # Degree calculation
    graph.set_infected(init_infected)
    graph.recalculate_degrees()

    # Converts to nx.Graph
    graph_nx, colours = graph.to_nx_with_degree_colour()

    # i think this generates the positions randomly for each node according to the given layout
    # the layout is algorithm used by networkx
    pos = getattr(nx, 'spring_layout')(graph_nx)

    # put positions of nodes into lists
    x_values = [pos[k][0] for k in graph_nx.nodes]
    y_values = [pos[k][1] for k in graph_nx.nodes]
    labels = list(graph_nx.nodes)

    # put positions of edges into lists
    x_edges = []
    y_edges = []
    for edge in graph_nx.edges:
        x_edges += [pos[edge[0]][0], pos[edge[1]][0], None]
        y_edges += [pos[edge[0]][1], pos[edge[1]][1], None]

    # create the edges in plotly
    trace3 = Scatter(x=x_edges,
                     y=y_edges,
                     mode='lines',
                     name='edges',
                     line=dict(width=2,
                               color='rgb(0, 0, 0)'),
                     hoverinfo='none',
                     )

    # create the nodes in plotly
    trace4 = Scatter(x=x_values,
                     y=y_values,
                     mode='markers',
                     name='nodes',
                     marker=dict(symbol='circle-dot',
                                 size=50,
                                 color=colours,
                                 line=dict(width=0.5)
                                 ),
                     text=labels,
                     hovertemplate='%{text}',
                     hoverlabel={'namelength': 0}
                     )

    # add these nodes and edges to the figure and show the graph
    data1 = [trace3, trace4]
    fig = Figure(data=data1)
    fig.update_layout({'showlegend': False})
    fig.update_xaxes(showgrid=False, zeroline=False, visible=False)
    fig.update_yaxes(showgrid=False, zeroline=False, visible=False)

    fig.show()


def visualize_simple_dataset() -> None:
    """Visualize the graph generated by the persons and connections dataset in plotly"""
    # load the graph
    graph = data_processing.load_graph_csv('data/persons.csv', 'data/connections.csv')
    graph_nx = graph.to_nx()

    # i think this generates the positions randomly for each node according to the given layout
    # the layout is algorithm used by networkx
    pos = getattr(nx, 'spring_layout')(graph_nx)

    # put positions of nodes into lists
    x_values = [pos[k][0] for k in graph_nx.nodes]
    y_values = [pos[k][1] for k in graph_nx.nodes]
    labels = list(graph_nx.nodes)

    # set colours of nodes
    colours = ['rgb(255, 0, 0)' for _ in range(len(graph_nx.nodes))]

    # put positions of edges into lists
    x_edges = []
    y_edges = []
    for edge in graph_nx.edges:
        x_edges += [pos[edge[0]][0], pos[edge[1]][0], None]
        y_edges += [pos[edge[0]][1], pos[edge[1]][1], None]

    # create the edges in plotly
    trace3 = Scatter(x=x_edges,
                     y=y_edges,
                     mode='lines',
                     name='edges',
                     line=dict(width=1),
                     hoverinfo='none',
                     )

    # create the nodes in plotly
    trace4 = Scatter(x=x_values,
                     y=y_values,
                     mode='markers',
                     name='nodes',
                     marker=dict(symbol='circle-dot',
                                 size=5,
                                 color=colours,
                                 line=dict(width=0.5)
                                 ),
                     text=labels,
                     hovertemplate='%{text}',
                     hoverlabel={'namelength': 0}
                     )

    # add these nodes and edges to the figure and show the graph
    data1 = [trace3, trace4]
    fig = Figure(data=data1)
    fig.update_layout({'showlegend': False})
    fig.update_xaxes(showgrid=False, zeroline=False, visible=False)
    fig.update_yaxes(showgrid=False, zeroline=False, visible=False)

    fig.show()
